          AREA |C$$code|, CODE, READONLY

; constants
width             * 32
height            * 34
period            * 200
wordsperrow       * 2
nwords            * 64
nframes           * 1
active_x          * 0
active_y          * 0
percentage_height        * 0

; Workspace for changing the hourglass rendition
                  ^ 0, r12
hg_framenum       # 4                         ; frame number
hg_percentage     # 4                         ; percentage to show
hg_percentagenow  # 4                         ; percentage being shown
hg_leds           # 4                         ; LED flags (N/I)
hg_oldpointer     # 4                         ; Old pointer configuration
hg_oldcolours     # 4 * 3                     ; Old palette entries
hg_word           # 12                        ; OS_Word block
hg_currentdata    # 4 * wordsperrow * (height + percentage_height)  ; Current data for the hourglass
hg_workspacesize  * :INDEX: @                 ; Size of this workspace

; SWI numbers
XOS_Byte          * 0x20006
XOS_Word          * 0x20007
XOS_ReadPalette   * 0x2002F

; -------------------------------------------------
        MACRO
$label  SIGNATURE
        ALIGN   4
        =       "$label",0
        ALIGN   4
        DCD     &FF000000+(:LEN:"$label"+4):AND::NOT:3
$label
        MEND


; Data for deltas between frames
deltas
          ; frame 0
          DCD     &00000000, &00000001, &00000000
          DCD     &00000008, &00000005, &00000000
          DCD     &00000010, &00000055, &00000000
          DCD     &00000018, &00000155, &00000000
          DCD     &00000020, &00001505, &00000000
          DCD     &00000028, &00005405, &00000000
          DCD     &00000030, &00054005, &00000000
          DCD     &00000038, &00150005, &00000000
          DCD     &00000040, &01500005, &00000000
          DCD     &00000048, &05400004, &00000000
          DCD     &00000050, &54000014, &00000000
          DCD     &00000058, &50000014, &00000001
          DCD     &00000060, &00000014, &00000015
          DCD     &00000068, &00000014, &00000054
          DCD     &00000070, &00000014, &00000554
          DCD     &00000078, &54000014, &00000555
          DCD     &00000080, &55000014, &00000001
          DCD     &00000088, &14000014, &00000000
          DCD     &00000090, &14014014, &00000000
          DCD     &00000098, &50015014, &55555540
          DCD     &000000a0, &50055014, &15001500
          DCD     &000000a8, &40051414, &14000501
          DCD     &000000b0, &40140554, &14000505
          DCD     &000000b8, &00540150, &14000505
          DCD     &000000c0, &00500050, &05405414
          DCD     &000000c8, &01400050, &01515014
          DCD     &000000d0, &01400010, &01515054
          DCD     &000000d8, &05000000, &05405415
          DCD     &000000e0, &55000000, &15001501
          DCD     &000000e8, &54000000, &14000500
          DCD     &000000f0, &00000000, &14000500
          DCD     &000000f8, &00000000, &14000500
          DCD     &00000100, &00000000, &55555540
          DCD     &00000108, &00000000, &55555540
          DCD     -1

; Offsets into the deltas for each frame
frame_deltas
          DCD     0  ; frame 0

; Palette data
palette
          DCB     0, 255, 255
          ALIGN

; Read the period between frames
; <=  R0 = cs between frames
hourglass_getframeperiod SIGNATURE
          EXPORT  hourglass_getframeperiod
          MOV     r0, #period
          MOV     pc, lr


; Read the size of the workspace block
; <=  R0 = size of hourglass workspace
hourglass_getwssize SIGNATURE
          EXPORT  hourglass_getwssize
          MOV     r0, #hg_workspacesize
          MOV     pc, lr

; Initialisation function
; =>  R0 = hourglass workspace
hourglass_init SIGNATURE
          EXPORT  hourglass_init
          MOV     r12, r0
          MOV     r0, #0
          STR     r0, hg_framenum
          STR     r0, hg_leds
          MOV     r0, #-1
          STR     r0, hg_percentagenow
          MOV     r0, #100
          STR     r0, hg_percentage
          LDR     r0, wordblock_0
          STR     r0, hg_word
          LDR     r0, wordblock_4
          ADR     r1, hg_currentdata
          ORR     r0, r0, r1, LSL #16         ; assign the low half word of pointer data
          STR     r0, hg_word + 4
          MOV     r0, r1, LSR #16             ; and the high half word
          STR     r0, hg_word + 8
; no need to initialise the currentdata; it will be updated by the first frame
          MOV     pc, lr

wordblock_0
          DCB     0                           ; define pointer shape
          DCB     3                           ; shape number (will toggle 3-4)
          DCB     (width*2+7)/8               ; width in bytes
          DCB     height                      ; height
wordblock_4
          DCB     active_x                    ; active x offset
          DCB     active_y                    ; active y offset
          DCB     0                           ; b0-7 of the address of the pointer data
          DCB     0                           ; b8-15 of address of the pointer data

; Start the hourglass
; =>  R0 = hourglass workspace
hourglass_start SIGNATURE
          EXPORT  hourglass_start
          STMFD   sp!, {r4, r5, lr}
          SUB     sp, sp, #8
          MOV     r12, r0
          MOV     r0, #0
          STR     r0, hg_framenum
          MOV     r0, #1
          MOV     r1, #25                     ; read pointer colour 1
          SWI     XOS_ReadPalette
          LDRVS   r2, =&81397900              ; purple if it wasn't set
          STR     r2, hg_oldcolours + 4 * 0
          MOV     r0, #2
          MOV     r1, #25                     ; read pointer colour 2
          SWI     XOS_ReadPalette
          LDRVS   r2, =&66FFFF00              ; yellow if it wasn't set
          STR     r2, hg_oldcolours + 4 * 1
          MOV     r0, #3
          MOV     r1, #25                     ; read pointer colour 3
          SWI     XOS_ReadPalette
          LDRVS   r2, =&00000000              ; black if it wasn't set
          STR     r2, hg_oldcolours + 4 * 2
; now set the palette up for our hourglass
          MOV     r1, sp
          ADRL    r2, palette
; colour 1
          MOV     r0, #1
          STRB    r0, [r1, #0]
          MOV     r0, #25                     ; set pointer colour 1
          STRB    r0, [r1, #1]
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #2]                ; red
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #3]                ; green
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #4]                ; blue
          MOV     r0, #12
          SWI     XOS_Word                    ; Set palette
          MOV     r1, #127                        ; invalid pointer number to read the pointer
          MOV     r0, #106                        ; select pointer
          SWI     XOS_Byte
          MOVVS   r1, #0                          ; if there was an error, turn off
          STR     r1, hg_oldpointer
          ADD     sp, sp, #8
          LDMFD   sp!, {r4, r5, lr}
          MOV     r0, r12
          B       hourglass_frame                 ; exit via the first frame

; Stop the hourglass
; =>  R0 = hourglass workspace
hourglass_stop SIGNATURE
          EXPORT  hourglass_stop
          STMFD   sp!, {r4, r5, lr}
          SUB     sp, sp, #8
          MOV     r12, r0
          MOV     r0, #-1
          STR     r0, hg_percentagenow
          MOV     r0, #100
          STR     r0, hg_percentage
          LDR     r4, hg_oldpointer               ; work out the old pointer shape
          BIC     r4, r4, #127                    ; turn off the pointer whilst we change colours
          MOV     r0, #106                        ; select pointer
          SWI     XOS_Byte
; restore the palette up for old pointer
          MOV     r1, sp
; colour 1
          ADR     r2, hg_oldcolours + 4 * 0 + 1
          MOV     r0, #1
          STRB    r0, [r1, #0]
          MOV     r0, #25                         ; set pointer colour 1
          STRB    r0, [r1, #1]
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #2]                    ; red
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #3]                    ; green
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #4]                    ; blue
          MOV     r0, #12
          SWI     XOS_Word                        ; Set palette
          MOV     r1, r4                          ; re-select the old pointer number
          MOV     r0, #106                        ; select pointer
          SWI     XOS_Byte
          ADD     sp, sp, #8
          LDMFD   sp!, {r4, r5, pc}

; Frame update - sets the hourglass shape for the current frame
; =>  R0 = hourglass workspace
hourglass_frame SIGNATURE
          EXPORT  hourglass_frame
          STMFD   sp!, {r4, r5, lr}
          MOV     r12, r0
          LDR     r0, hg_framenum
          ADRL    r1, frame_deltas
          LDR     r0, [r1, r0, LSL #2]            ; offset within deltas for this frame
          ADRL    r1, deltas
          ADD     r1, r1, r0
          ADRL    r5, hg_currentdata
rowloop
          LDR     r3, [r1], #4                    ; r3 = currentdata offset
          CMP     r3, #-1                         ; end of the rows
          BEQ     rowend
      [ wordsperrow = 1
          LDR     r0, [r1], #4                    ; read a word
          STR     r0, [r3, r5]                    ; store into the currentdata
      ]
      [ wordsperrow = 2
          LDMIA   r1!, {r0, r2}                   ; read two word from rowdata
          STR     r0, [r3, r5]!                   ; store into the currentdata
          STR     r2, [r3, #4]                    ; store into the currentdata
      ]
      [ wordsperrow = 3
          LDMIA   r1!, {r0, r2, r4}               ; read a word from rowdata
          ADD     r3, r3, r5                      ; work out the line offset
          STMIA   r3!, {r0, r2, r4}               ; store into the currentdata
      ]
      [ wordsperrow = 4
          LDMIA   r1!, {r0, r2, r4, lr}           ; read a word from rowdata
          ADD     r3, r3, r5                      ; work out the line offset
          STMIA   r3!, {r0, r2, r4, lr}           ; store into the currentdata
      ]
          B       rowloop

rowend
          MOV     r0, #21                         ; Set Pointer parameters
          ADR     r1, hg_word
          SWI     XOS_Word

          LDRB    r1, hg_word + 1                 ; get the hourglass pointer number we will use
          RSB     lr, r1, #7                      ; toggles 3 to 4
          STRB    lr, hg_word + 1                 ; toggles the pointer number we use next time
          MOV     r0, #106                        ; select pointer
          SWI     XOS_Byte

          LDR     r0, hg_framenum
          ADD     r0, r0, #1
          TEQ     r0, #nframes
          MOVEQ   r0, #0                          ; reset counter; we've cycled
          STR     r0, hg_framenum
          LDMFD   sp!, {r4, r5, pc}

; Frame update within an IRQ
; =>  R12 = hourglass workspace
hourglass_frame_irq SIGNATURE
          EXPORT  hourglass_frame_irq
          STMFD   sp!, {r0-r3, r4, r5, r12, lr}
          MOV     r0, r12
          MRS     r4, CPSR
          BIC     r1, r4, #&F
          ORR     r1, r1, #&3
          MSR     CPSR_csxf, r1                    ; Enter SVC mode (keep bitness)
          MOV     r5, lr
          BL      hourglass_frame
          MOV     lr, r5
          MSR     CPSR_cxsf, r4                    ; Restore the mode
          LDMFD   sp!, {r0-r3, r4, r5, r12, pc}

; Set the percentage of the hourglass
; =>  R0 = hourglass workspace
;     R1 = percentage (0-99, or 100 to turn the percentage off)
hourglass_percentage SIGNATURE
          STMFD   sp!, {r4, r5, lr}
          EXPORT  hourglass_percentage
          MOV     r12, r0
          STR     r1, hg_percentage
          LDMFD   sp!, {r4, r5, pc}

          END
