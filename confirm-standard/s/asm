          AREA |C$$code|, CODE, READONLY

; constants
width             * 32
height            * 50
period            * 200
wordsperrow       * 2
nwords            * 16
nframes           * 1
active_x          * 0
active_y          * 0

; Workspace for changing the hourglass rendition
                  ^ 0, r12
hg_framenum       # 4                         ; frame number
hg_percentage     # 4                         ; percentage to show (N/I)
hg_leds           # 4                         ; LED flags (N/I)
hg_oldpointer     # 4                         ; Old pointer configuration
hg_oldcolours     # 4 * 3                     ; Old palette entries
hg_word           # 12                        ; OS_Word block
hg_currentdata    # 4 * wordsperrow * height  ; Current data for the hourglass
hg_workspacesize  * :INDEX: @                 ; Size of this workspace

; SWI numbers
XOS_Byte          * 0x20006
XOS_Word          * 0x20007
XOS_ReadPalette   * 0x2002F

; -------------------------------------------------
        MACRO
$label  SIGNATURE
        ALIGN   4
        =       "$label",0
        ALIGN   4
        DCD     &FF000000+(:LEN:"$label"+4):AND::NOT:3
$label
        MEND

; Data for the rows of the hourglass
rowdata
          DCD     &fffffff0, &0000ffff
          DCD     &5555555c, &00035555
          DCD     &55555557, &000d5555
          DCD     &fff7ffd7, &000d7ffd
          DCD     &d577ffd7, &000d755d
          DCD     &5555d5d7, &000d5555
          DCD     &55557757, &000d5555
          DCD     &55555d57, &000d5555

; Data for deltas between frames
deltas
          ; frame 0
          DCD     0, 0
          DCD     8, 8
          DCD     16, 16
          DCD     24, 24
          DCD     32, 32
          DCD     40, 32
          DCD     48, 32
          DCD     56, 32
          DCD     64, 32
          DCD     72, 32
          DCD     80, 24
          DCD     88, 16
          DCD     96, 16
          DCD     104, 40
          DCD     112, 40
          DCD     120, 40
          DCD     128, 48
          DCD     136, 56
          DCD     144, 56
          DCD     152, 56
          DCD     160, 16
          DCD     168, 16
          DCD     176, 16
          DCD     184, 8
          DCD     192, 0
          DCD     -1, -1

; Offsets into the deltas for each frame
frame_deltas
          DCD     0  ; frame 0

; Palette data
palette
          DCB     238, 238, 170
          DCB     0, 0, 0
          DCB     85, 85, 85
          ALIGN

; Read the period between frames
; <=  R0 = cs between frames
hourglass_getframeperiod SIGNATURE
          EXPORT  hourglass_getframeperiod
          MOV     r0, #period
          MOV     pc, lr


; Read the size of the workspace block
; <=  R0 = size of hourglass workspace
hourglass_getwssize SIGNATURE
          EXPORT  hourglass_getwssize
          MOV     r0, #hg_workspacesize
          MOV     pc, lr

; Initialisation function
; =>  R0 = hourglass workspace
hourglass_init SIGNATURE
          EXPORT  hourglass_init
          MOV     r12, r0
          MOV     r0, #0
          STR     r0, hg_framenum
          STR     r0, hg_percentage
          STR     r0, hg_leds
          LDR     r0, wordblock_0
          STR     r0, hg_word
          LDR     r0, wordblock_4
          ADR     r1, hg_currentdata
          ORR     r0, r0, r1, LSL #16         ; assign the low half word of pointer data
          STR     r0, hg_word + 4
          MOV     r0, r1, LSR #16             ; and the high half word
          STR     r0, hg_word + 8
; no need to initialise the currentdata; it will be updated by the first frame
          MOV     pc, lr

wordblock_0
          DCB     0                           ; define pointer shape
          DCB     3                           ; shape number (will toggle 3-4)
          DCB     (width*2+7)/8               ; width in bytes
          DCB     height                      ; height
wordblock_4
          DCB     active_x                    ; active x offset
          DCB     active_y                    ; active y offset
          DCB     0                           ; b0-7 of the address of the pointer data
          DCB     0                           ; b8-15 of address of the pointer data

; Start the hourglass
; =>  R0 = hourglass workspace
hourglass_start SIGNATURE
          EXPORT  hourglass_start
          STMFD   sp!, {r4, r5, lr}
          SUB     sp, sp, #8
          MOV     r12, r0
          MOV     r0, #0
          STR     r0, hg_framenum
          MOV     r0, #1
          MOV     r1, #25                     ; read pointer colour 1
          SWI     XOS_ReadPalette
          LDRVS   r2, =&81397900              ; purple if it wasn't set
          STR     r2, hg_oldcolours + 4 * 0
          MOV     r0, #2
          MOV     r1, #25                     ; read pointer colour 2
          SWI     XOS_ReadPalette
          LDRVS   r2, =&66FFFF00              ; yellow if it wasn't set
          STR     r2, hg_oldcolours + 4 * 1
          MOV     r0, #3
          MOV     r1, #25                     ; read pointer colour 3
          SWI     XOS_ReadPalette
          LDRVS   r2, =&00000000              ; black if it wasn't set
          STR     r2, hg_oldcolours + 4 * 2
; now set the palette up for our hourglass
          MOV     r1, sp
          ADRL    r2, palette
; colour 1
          MOV     r0, #1
          STRB    r0, [r1, #0]
          MOV     r0, #25                     ; set pointer colour 1
          STRB    r0, [r1, #1]
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #2]                ; red
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #3]                ; green
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #4]                ; blue
          MOV     r0, #12
          SWI     XOS_Word                    ; Set palette
; colour 2
          MOV     r0, #2
          STRB    r0, [r1, #0]
          MOV     r0, #25                     ; set pointer colour 1
          STRB    r0, [r1, #1]
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #2]                ; red
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #3]                ; green
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #4]                ; blue
          MOV     r0, #12
          SWI     XOS_Word                    ; Set palette
; colour 3
          MOV     r0, #3
          STRB    r0, [r1, #0]
          MOV     r0, #25                     ; set pointer colour 1
          STRB    r0, [r1, #1]
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #2]                ; red
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #3]                ; green
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #4]                ; blue
          MOV     r0, #12
          SWI     XOS_Word                    ; Set palette
          MOV     r1, #127                        ; invalid pointer number to read the pointer
          MOV     r0, #106                        ; select pointer
          SWI     XOS_Byte
          MOVVS   r1, #0                          ; if there was an error, turn off
          STR     r1, hg_oldpointer
          ADD     sp, sp, #8
          LDMFD   sp!, {r4, r5, lr}
          MOV     r0, r12
          B       hourglass_frame                 ; exit via the first frame

; Stop the hourglass
; =>  R0 = hourglass workspace
hourglass_stop SIGNATURE
          EXPORT  hourglass_stop
          STMFD   sp!, {r4, r5, lr}
          SUB     sp, sp, #8
          MOV     r12, r0
; restore the palette up for old pointer
          MOV     r1, sp
; colour 1
          ADR     r2, hg_oldcolours + 4 * 0 + 1
          MOV     r0, #1
          STRB    r0, [r1, #0]
          MOV     r0, #25                         ; set pointer colour 1
          STRB    r0, [r1, #1]
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #2]                    ; red
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #3]                    ; green
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #4]                    ; blue
          MOV     r0, #12
          SWI     XOS_Word                        ; Set palette
; colour 2
          ADR     r2, hg_oldcolours + 4 * 1 + 1
          MOV     r0, #2
          STRB    r0, [r1, #0]
          MOV     r0, #25                         ; set pointer colour 1
          STRB    r0, [r1, #1]
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #2]                    ; red
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #3]                    ; green
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #4]                    ; blue
          MOV     r0, #12
          SWI     XOS_Word                        ; Set palette
; colour 3
          ADR     r2, hg_oldcolours + 4 * 2 + 1
          MOV     r0, #3
          STRB    r0, [r1, #0]
          MOV     r0, #25                         ; set pointer colour 1
          STRB    r0, [r1, #1]
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #2]                    ; red
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #3]                    ; green
          LDRB    r0, [r2], #1
          STRB    r0, [r1, #4]                    ; blue
          MOV     r0, #12
          SWI     XOS_Word                        ; Set palette
          LDR     r1, hg_oldpointer               ; re-select the old pointer number
          MOV     r0, #106                        ; select pointer
          SWI     XOS_Byte
          ADD     sp, sp, #8
          LDMFD   sp!, {r4, r5, pc}

; Frame update - sets the hourglass shape for the current frame
; =>  R0 = hourglass workspace
hourglass_frame SIGNATURE
          EXPORT  hourglass_frame
          STMFD   sp!, {r4, r5, lr}
          MOV     r12, r0
          LDR     r0, hg_framenum
          ADRL    r1, frame_deltas
          LDR     r0, [r1, r0, LSL #2]            ; offset within deltas for this frame
          ADRL    r1, deltas
          ADD     r1, r1, r0
          ADRL    r2, rowdata
          ADRL    r5, hg_currentdata
rowloop
          LDMIA   r1!, {r3, r4}                   ; r3 = currentdata offset, row data offset
          CMP     r3, #-1                         ; end of the rows
          BEQ     rowend
          LDR     r0, [r4, r2]!                   ; read a word from rowdata
          STR     r0, [r3, r5]!                   ; store into the currentdata
      [ wordsperrow > 1
          LDR     r0, [r4, #4]!                   ; read a word from rowdata
          STR     r0, [r3, #4]!                   ; store into the currentdata
      ]
      [ wordsperrow > 2
          LDR     r0, [r4, #4]!                   ; read a word from rowdata
          STR     r0, [r3, #4]!                   ; store into the currentdata
      ]
      [ wordsperrow > 3
          LDR     r0, [r4, #4]!                   ; read a word from rowdata
          STR     r0, [r3, #4]!                   ; store into the currentdata
      ]
          B       rowloop

rowend
          MOV     r0, #21                         ; Set Pointer parameters
          ADR     r1, hg_word
          SWI     XOS_Word

          LDRB    r1, hg_word + 1                 ; get the hourglass pointer number we will use
          RSB     lr, r1, #7                      ; toggles 3 to 4
          STRB    lr, hg_word + 1                 ; toggles the pointer number we use next time
          MOV     r0, #106                        ; select pointer
          SWI     XOS_Byte

          LDR     r0, hg_framenum
          ADD     r0, r0, #1
          TEQ     r0, #nframes
          MOVEQ   r0, #0                          ; reset counter; we've cycled
          STR     r0, hg_framenum
          LDMFD   sp!, {r4, r5, pc}

; Frame update within an IRQ
; =>  R12 = hourglass workspace
hourglass_frame_irq SIGNATURE
          EXPORT  hourglass_frame_irq
          STMFD   sp!, {r0-r3, r4, r5, r12, lr}
          MOV     r0, r12
          MRS     r4, CPSR
          AND     r1, r4, #&F
          ORR     r1, r1, #&3
          MSR     CPSR_csxf, r1                    ; Enter SVC mode (keep bitness)
          MOV     r5, lr
          BL      hourglass_frame
          MOV     lr, r5
          MSR     CPSR_cxsf, r4                    ; Restore the mode
          LDMFD   sp!, {r0-r3, r4, r5, r12, pc}

          END
